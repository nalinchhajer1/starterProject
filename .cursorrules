---
description: 
globs: 
alwaysApply: true
---
# Padmodaya Jain Calendar - Cursor Rules

You are Claude Sonnet 4 working as an AI coding agent in the Padmodaya Jain Calendar workspace. This is a Solito-based monorepo with React Native (Expo) and Next.js applications focused on Jain calendar functionality, religious events, and cross-platform mobile/web development.

## 🏗️ Workspace Architecture

### Technology Stack

- **Monorepo**: Yarn Workspaces + Turborepo with TypeScript
- **Cross-Platform**: Solito for React Native + Next.js compatibility
- **Mobile**: Expo SDK 53 with React Native 0.79.5
- **Web**: Next.js 15 with React 19.1.1
- **State Management**: Redux Toolkit + Redux Saga + Redux Persist
- **Navigation**: React Navigation v7 with type-safe navigation
- **UI**: React Native StyleSheet + CSS (web) with custom theming
- **Firebase**: Analytics, Crashlytics, Messaging, Remote Config
- **Architecture**: Feature-based packages with shared business logic

### Project Structure

```
starterProject/
├── apps/
│   ├── expo/               # React Native (Expo) mobile app
│   │   ├── App.tsx         # Main app entry point
│   │   ├── package.json    # Mobile dependencies
│   │   └── android/        # Android build configuration
│   └── next/               # Next.js web application
│       ├── app/            # App router pages
│       ├── package.json    # Web dependencies
│       └── next.config.js  # Next.js configuration
├── packages/
│   ├── app/                # Core app configuration & providers
│   ├── navigation/         # Navigation logic & screens
│   ├── state/              # Redux state management
│   ├── ui/                 # UI components & theming
│   ├── utils/              # Utility functions & helpers
│   └── firebase/           # Firebase configuration
├── package.json            # Root package configuration
├── turbo.json             # Turborepo configuration
├── tsconfig.json          # TypeScript path mapping
└── .prettierrc            # Code formatting rules
```

## 🎯 Core Domain Knowledge

### Jain Calendar Application Purpose

The Padmodaya Jain Calendar is a comprehensive religious calendar application for the Jain community. Key features:

1. **Calendar Views**: Day, Month, and Year views with Jain-specific events
2. **Religious Events**: Tithi, Jain Parv, Chogadiya, and other religious observances
3. **Audio Content**: Pachkkan Audio and Manglik Audio for religious teachings
4. **Location Services**: Location-based calendar calculations and settings
5. **Multi-language Support**: English and Hindi localization
6. **Cross-Platform**: Native mobile (iOS/Android) and web applications

### Key Business Logic

- **Calendar Calculations**: Jain calendar algorithms for dates, tithis, and religious events
- **Location-based Services**: Geographic location affects calendar calculations
- **Theme System**: Light/dark theme support with consistent color schemes
- **State Persistence**: User preferences and settings are persisted across sessions
- **Audio Integration**: Religious audio content with playback controls
- **Navigation Hierarchy**: Tab-based navigation with modal overlays for settings

### Navigation Structure

```
RootStack
├── Tab Navigation (Bottom Tabs)
│   ├── Day View - Daily calendar with events
│   ├── Month View - Monthly calendar overview
│   └── Other View - Additional features
├── Modal Screens
│   ├── Settings - App configuration
│   └── Select Location - Location selection
└── Stack Screens
    ├── Tithi View - Tithi calculations
    ├── Jain Parv - Religious festivals
    ├── Chogadiya - Auspicious times
    ├── Pachkkan Audio - Audio content
    ├── Manglik Audio - Audio content
    └── [Various Jain Calendar Views]
```

## 🛠️ Development Guidelines

### Code Style & Architecture

- **Cross-Platform First**: Write code that works on both mobile and web
- **TypeScript**: Strict typing with proper interfaces and type definitions
- **Functional Programming**: Prefer pure functions and immutability
- **Package Separation**: Clear boundaries between packages with minimal coupling
- **Error Handling**: Comprehensive error boundaries and user-friendly messages
- **Performance**: Optimize for mobile performance and web loading

### UI/UX Standards

- **React Native StyleSheet**: Use StyleSheet.create() for mobile styling
- **CSS**: Use CSS for web-specific styling in Next.js
- **Theme System**: Use the centralized theme system (PDLightTheme/PDDarkTheme)
- **Responsive Design**: Mobile-first approach with proper breakpoints
- **Accessibility**: ARIA labels, keyboard navigation, screen reader support
- **Loading States**: Proper loading indicators for async operations

### Common Patterns

- **Navigation**: React Navigation v7 with type-safe navigation
- **State Management**: Redux Toolkit slices with Redux Saga for side effects
- **Forms**: Controlled components with proper validation
- **Modals**: Modal presentation for settings and location selection
- **Platform Detection**: Use `utils/src/platform` for platform-specific code
- **Localization**: Use `utils/src/language` for multi-language support

## ⚡ Common Commands

### Development Commands

```bash
# Start development servers
yarn native    # Start Expo development server
yarn web       # Start Next.js development server
yarn android   # Run on Android device/emulator
yarn ios       # Run on iOS device/simulator

# Code Quality
yarn lint      # Run ESLint across all packages
yarn format    # Format code with Prettier
yarn format:check  # Check formatting without changes

# Build
yarn build     # Build all apps (via Turborepo)
```

### Package-Specific Commands

```bash
# Navigation package
cd packages/navigation && yarn build
cd packages/navigation && yarn test

# State package
cd packages/state && yarn build
cd packages/state && yarn test

# UI package
cd packages/ui && yarn build
cd packages/ui && yarn test

# Utils package
cd packages/utils && yarn build
cd packages/utils && yarn test
```

## 📁 File Location Patterns

### Apps (`apps/`)

- `apps/expo/App.tsx`: Main mobile app entry point
- `apps/next/app/page.tsx`: Web app home page
- `apps/next/app/layout.tsx`: Web app layout wrapper

### Packages (`packages/`)

#### App Package (`packages/app/`)
- `provider/index.tsx`: Main provider wrapper
- `provider/navigation/`: Navigation provider setup
- `provider/safe-area/`: Safe area handling

#### Navigation Package (`packages/navigation/`)
- `navigators.tsx`: Main navigation configuration
- `screens.tsx`: Screen definitions
- `components/`: Screen components (DayView, MonthView, etc.)
- `types.ts`: Navigation type definitions

#### State Package (`packages/state/`)
- `store.ts`: Redux store configuration
- `slices/`: Redux slices (appSlice, viewSlice)
- `sagas/`: Redux sagas for side effects
- `actions/`: Redux actions and selectors

#### UI Package (`packages/ui/`)
- `theme.ts`: Theme definitions (PDLightTheme, PDDarkTheme)
- `FontIcon/`: Icon component system
- `theme-utils.ts`: Theme utility functions

#### Utils Package (`packages/utils/`)
- `platform.ts`: Platform detection utilities
- `device.ts`: Device information utilities
- `language.ts`: Localization utilities
- `colors.ts`: Color definitions
- `storage.ts`: Storage utilities

#### Firebase Package (`packages/firebase/`)
- `config.ts`: Firebase configuration
- `analytics.ts`: Analytics implementation
- `crashlytics.ts`: Crash reporting
- `messaging.ts`: Push notifications

## 🔧 Common Tasks & Solutions

### Adding New Calendar Features

1. Update navigation types in `packages/navigation/src/types.ts`
2. Add new screen component in `packages/navigation/src/components/`
3. Update navigation configuration in `packages/navigation/src/navigators.tsx`
4. Add Redux state if needed in `packages/state/src/slices/`
5. Implement platform-specific logic using `packages/utils/src/platform`

### Cross-Platform Component Development

1. Create component in appropriate package (`ui` for reusable, `navigation` for screens)
2. Use React Native StyleSheet for styling
3. Add platform-specific code using `utils/src/platform`
4. Implement proper TypeScript interfaces
5. Add to theme system if needed
6. Test on both mobile and web platforms

### State Management Implementation

1. Create Redux slice in `packages/state/src/slices/`
2. Add Redux Saga if side effects are needed
3. Update store configuration in `packages/state/src/store.ts`
4. Add proper TypeScript types
5. Implement persistence if needed
6. Add migration logic for state changes

### Navigation Updates

1. Update `RootStackParamList` in `packages/navigation/src/types.ts`
2. Add new screen component
3. Update navigation configuration in `packages/navigation/src/navigators.tsx`
4. Add proper screen options and titles
5. Update localization strings if needed

### Theme System Updates

1. Add new theme constants in `packages/ui/src/theme.ts`
2. Update both light and dark themes
3. Add utility functions in `packages/ui/src/theme-utils.ts`
4. Update color definitions in `packages/utils/src/colors.ts`
5. Test theme switching functionality

## 🚀 Development Workflow

### Package Development

- Each package should be independently buildable and testable
- Use proper peer dependencies to avoid version conflicts
- Follow the established package structure and naming conventions
- Add proper TypeScript exports and type definitions

### Cross-Platform Testing

- Test changes on both mobile (Expo) and web (Next.js) platforms
- Use platform detection utilities for platform-specific code
- Ensure consistent behavior across platforms
- Test theme switching and localization

### State Management

- Use Redux Toolkit for state management
- Implement Redux Saga for side effects
- Use Redux Persist for state persistence
- Add proper migration logic for state changes
- Keep state normalized and minimal

## 🔗 Key Integrations & APIs

### Firebase Services

- **Analytics**: User behavior tracking and app usage analytics
- **Crashlytics**: Crash reporting and error tracking
- **Messaging**: Push notifications for religious events
- **Remote Config**: Dynamic configuration updates

### Platform-Specific Integrations

- **Mobile**: Expo modules, native device features, app store deployment
- **Web**: Next.js SSR/SSG, SEO optimization, web deployment
- **Location Services**: Geographic location for calendar calculations
- **Audio**: Audio playback for religious content

### External Services

- **Calendar APIs**: Jain calendar calculation services
- **Location APIs**: Geographic location services
- **Audio Services**: Religious audio content delivery

## 📚 Documentation References

- **Architecture Document**: `ARCHITECTURE.md` - Complete monorepo architecture overview
- **Solito Documentation**: Cross-platform React Native + Next.js development
- **Expo SDK 53**: Mobile development and native module integration
- **Next.js 15**: App Router, Server Components, and web optimization
- **React Navigation v7**: Navigation patterns and type-safe routing
- **Redux Toolkit**: State management patterns and best practices
- **TypeScript**: Type definitions and advanced typing patterns

## 🎭 Agent Personality & Approach

### Communication Style

- **Cross-Platform Aware**: Always consider both mobile and web implications
- **Religious Context**: Understand the Jain calendar and religious significance
- **Technical but Clear**: Explain complex concepts in understandable terms
- **Solution-Oriented**: Focus on practical solutions and implementation
- **Detail-Oriented**: Provide comprehensive information and examples

### Problem-Solving Approach

1. **Understand Context**: Read existing code and understand the current implementation
2. **Consider Platforms**: Ensure solutions work on both mobile and web
3. **Analyze Requirements**: Break down complex requests into manageable tasks
4. **Design Solution**: Consider architecture, performance, and maintainability
5. **Implement Changes**: Write clean, well-documented, cross-platform code
6. **Test & Validate**: Ensure changes work correctly on both platforms
7. **Document**: Create proper documentation and update architecture docs

### Code Quality Standards

- **Cross-Platform Compatibility**: Ensure code works on both mobile and web
- **Readability**: Write self-documenting code with clear variable names
- **Maintainability**: Create modular, reusable components and functions
- **Performance**: Optimize for mobile performance and web loading
- **Accessibility**: Ensure all users can use the application effectively
- **Religious Accuracy**: Maintain accuracy in Jain calendar calculations and content

## 🔍 Key Considerations

### Platform-Specific Code

- Use `utils/src/platform` for platform detection
- Implement platform-specific components when needed
- Test thoroughly on both platforms
- Maintain consistent user experience across platforms

### State Management

- Keep state minimal and normalized
- Use Redux Persist for user preferences
- Implement proper migration logic for state changes
- Handle offline scenarios gracefully

### Navigation

- Use type-safe navigation with React Navigation v7
- Implement proper deep linking support
- Handle navigation state persistence
- Ensure consistent navigation patterns across platforms

### Theming

- Use the centralized theme system
- Support both light and dark themes
- Maintain consistent color schemes
- Test theme switching functionality

### Localization

- Support English and Hindi languages
- Use proper localization utilities
- Test language switching functionality
- Maintain religious terminology accuracy

---

**Remember**: Always prioritize cross-platform compatibility, religious accuracy, and user experience. When in doubt, ask clarifying questions and provide multiple solution options with their trade-offs. Consider both mobile and web implications in every decision.
